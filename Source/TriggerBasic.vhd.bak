library ieee;
use ieee.std_logic_1164.all;
use ieee.numeric_std.all;
use ieee.std_logic_misc.all;

use work.all;
use work.LogicAnalyserPackage.all;

library unisim;
use unisim.vcomponents.all;

--============================================================
-- Implements a NUM_INPUTS wide trigger circuit supporting 
--
--    High    Low     Rising     Falling     Change
--    -----              +---   ---+        ---+ +---
--                      /           \           X
--           -----  ---+             +---   ---+ +---
--============================================================
entity TriggerBasic is
    port ( 
         clock      : in  std_logic;      -- Used for LUT shift register 
         
         -- Trigger logic
         sample     : in  SampleDataType; -- Current sample data
         lastSample : in  SampleDataType; -- Previous sample data
         mode       : in  std_logic;      -- Mode of operation of trigger circuit
         trigger    : out std_logic;      -- Trigger output

         -- LUT serial configuration NUM_INPUTS/2 x 32 bits = NUM_INPUTS/2 LUTs
         lut_config_ce  : in  std_logic;  -- Clock enable for LUT shift register
         lut_config_in  : in  std_logic;  -- Serial in for LUT shift register (MSB first)
         lut_config_out : out std_logic   -- Serial out for LUT shift register
   );
end TriggerBasic;

architecture behavioral of TriggerBasic is

signal comparison   : std_logic_vector(NUM_INPUTS/2-1 downto 0);
signal lut_chainIn  : std_logic_vector(NUM_INPUTS/2-1 downto 0);
signal lut_chainOut : std_logic_vector(NUM_INPUTS/2-1 downto 0);

begin

   -- Each LUT implements a 2-bit comparison   
   GenerateLogic: 
   for index in NUM_INPUTS/2-1 downto 0 generate
      cfglut5_inst : CFGLUT5           -- For simulation  cfglut5_inst : entity work.CFGLUT5
      generic map (
         init => x"00000000"
      )
      port map (
         -- Reconfigure shift register
         clk => clock,                 -- Clock input
         ce  => lut_config_ce,         -- Clock enable
         cdi => lut_chainIn(index),    -- Serial configuration data input (MSB first)
         cdo => lut_chainOut(index),   -- Serial configuration data output
         
         -- Logic function
         i4  => mode,                  -- Logic data input
         i3  => lastsample(2*index+1), -- Logic data input
         i2  => sample(2*index+1),     -- Logic data input
         i1  => lastSample(2*index),   -- Logic data input
         i0  => sample(2*index),       -- Logic data input
         
         o5  => open,                  -- 4-LUT output
         o6  => comparison(index)      -- 5-LUT output      
      );
   end generate;
   
   -- Chain LUT shift-registers
   lut_chainIn    <= lut_chainOut(lut_chainOut'left-1 downto 0) & lut_config_in;
   lut_config_out <= lut_chainOut(lut_chainOut'left);
   
   -- Fold output of comparison bits
   trigger <= and_reduce(comparison);
   
end Behavioral;
